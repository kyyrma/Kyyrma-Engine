<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprHeroIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>parentMovingSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables unique to moving entities

event_inherited();

x_speedMax          = 5;        // Maximum speed on x-axis
y_speedMax          = 12;       // Maximum speed on y_axis

acceleration        = 2;        // Acceleration

jumpStrength        = 14;       // Initial jump strength

jumpMin             = 6;        // Minimum jump threshold

image_speed         = 0.2;      // Speed of sprite animation

terminalVelocity    = 7;        // Terminal velocity

attackDelay         = 0;        // Counter for attack delay
attackDelayMax      = 10;       // Maximum attack delay
attackPower         = 1;

sprite_indexLast    = sprite_index // Used to check for sprite index updates

team = TEAM.ally;



// Initialize states

enum HERO_STATE
{
    grounded,
    jumping,
    falling,
    attacking,
    damaged
}   

heroState = HERO_STATE.grounded;
heroStateLast = heroState;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Add x_speed on move keys

event_inherited();
        
if abs(x_speed) &lt; x_speedMax
{

    if keyLeftHeld
    {
        x_speed -= acceleration;
        facing = -1;
    }
    
    if keyRightHeld
    {
        x_speed += acceleration;
        facing = 1;
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack with the sword

if keyXPressed &amp;&amp; attackDelay = 0
{
    instance_create(x, y, oSwordAttack);
    attackDelay = attackDelayMax;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input and state transitions

// Save the last state

heroStateLast = heroState;

switch(heroState)
{
        
        case HERO_STATE.grounded:

            // Jump
            
            if grounded = 1 &amp;&amp; keyAPressed
            {
                y_speed = -jumpStrength;
                heroState = HERO_STATE.jumping;
                show_debug_message("Hero state is JUMPING")
            }
            
            // Fall off cliffs etc.
            
            if grounded = 0
            {
                show_debug_message("Hero state is FALLING.")
                heroState = HERO_STATE.falling;
            }

        
        break;

        
        case HERO_STATE.jumping:
        
            // Decelerate jump if key is released
            
            if keyAReleased &amp;&amp; y_speed &lt; -jumpMin
            {
                show_debug_message("Hero JUMP RELEASED.")
                y_speed = y_speed * 0.5;
            }
            
            // Fall once y_speed hits positive
            
            if y_speed &gt;= 0
            {
                show_debug_message("Hero state is FALLING.")
                heroState = HERO_STATE.falling;
            }

            // Bump head on ceiling
            
            if place_meeting(x, y - 1, parentSolid)
            {
                show_debug_message("Hero BUMPS head on a ceiling.")
                show_debug_message("Hero state is FALLING.")
                heroState = HERO_STATE.falling;
            }
             
        break;
        
         
        case HERO_STATE.falling:
        
            // If on ground, transition to grounded
       
            if grounded = 1
            {
                heroState = HERO_STATE.grounded
                show_debug_message("Hero state is GROUNDED")
            }
        
        break;
}
    
    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Round up x and y for a smoother ride

x = round(x);
y = round(y);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update animation

// Save the previous sprite_index

sprite_indexLast = sprite_index;

switch(heroState)
{
        
        case HERO_STATE.grounded:
        
            if keyLeftHeld || keyRightHeld
            {
                sprite_index = sprHeroRun;
            }
            else
            {
                sprite_index = sprHeroIdle;
            }
        
        break;

        
        case HERO_STATE.jumping:
        
            sprite_index = sprHeroJumping;
                     
        break;
        
         
        case HERO_STATE.falling:
        
            sprite_index = sprHeroFalling;
                    
        break;
}

if sprite_indexLast != sprite_index
{
    image_index = 0;
}
    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create the red aura trail

instance_create(x, y, oTrail);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Play sounds

// Play hit ground

if heroStateLast = HERO_STATE.falling &amp;&amp; heroState = HERO_STATE.grounded
{
    audio_play_sound(sfxHitGround, 0, 0);
}

// Play jump

if heroStateLast = HERO_STATE.grounded &amp;&amp; heroState = HERO_STATE.jumping
{
    audio_play_sound(sfxJump, 0, 0);
}

// Play footsteps

if sprite_index = sprHeroRun &amp;&amp; ((image_index = 2 - image_speed) || (image_index = 5 - image_speed)) &amp;&amp; !audio_is_playing(sfxHitGround)
{
    audio_play_sound(sfxStep, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Counters and delays

// Delay for next attack

if attackDelay &gt; 0
attackDelay -= 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw arm

event_inherited();

if draw = 1
{
    draw_sprite_ext(sprHeroIdleArm, image_index, x, y, facing, 1, 0, c_white, 1);
}

if debugMode = true
{
    draw_set_color(c_red);
    draw_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, false);
}
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
