<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>oController</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize global variables

// Physics

globalvar globalGravity;
globalvar globalFriction;

globalvar view_wview_noscale;
globalvar view_yview_noscale;

globalvar fullScreen;

// Input related

globalvar gamepadConnected;

// Key bindings

globalvar keyLeft, keyRight, keyUp, keyDown;

globalvar keyA, keyX, KeyB, keyY;

globalvar keyStart, keySelect;

// Key press checks

globalvar keyLeftPressed, keyRightPressed, keyUpPressed, keyDownPressed;

globalvar keyAPressed, keyXPressed, keyBPressed, keyYPressed;

globalvar keyStartPressed, keySelectPressed;

// Key held checks

globalvar keyLeftHeld, keyRightHeld, keyUpHeld, keyDownHeld;

globalvar keyAHeld, keyXHeld, keyBHeld, keyYHeld;

globalvar keyStartHeld, keySelectHeld;

// Key released checks

globalvar keyLeftReleased, keyRightReleased, keyUpReleased, keyDownReleased;

globalvar keyAReleased, keyXReleased, keyBReleased, keyYReleased;

globalvar keyStartReleased, keySelectReleased;

// Setup states

enum INPUT_METHOD
{
    keyboard,
    gamepad
}

enum TEAM
{
    ally,
    neutral,
    enemy
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set global values

// Physics

globalGravity      = 0.8;                        // Gravity applied to all physics objects
globalFriction     = 1;

// Devices

gamepadConnected   = 0;                        // Is gamepad connected
inputMethod        = INPUT_METHOD.keyboard     // Input method (keyboard, gamepad)


view_wview_noscale = 640;
view_yview_noscale = 360;

fullScreen = false;

// Keyboard default keybindings

keyLeft[0]         = vk_left;      // Movement key left
keyRight[0]        = vk_right;     // Movement key right
keyUp[0]           = vk_up;        // Movement key up
keyDown[0]         = vk_down;      // Movement key down

keyA[0]            = ord('Z');     // Action key A
keyX[0]            = ord('X');     // Action key X
keyB[0]            = ord('Z');     // Action key B
keyY[0]            = ord('X');     // Action key Y

keyStart[0]        = vk_enter;     // Action key Start
keySelect[0]       = vk_shift      // Action key Select

// Gamepad default keybindings

keyLeft[1]         = gp_padl;      // Movement key left
keyRight[1]        = gp_padr;      // Movement key right
keyUp[1]           = gp_padu;      // Movement key up
keyDown[1]         = gp_padd;      // Movement key down

keyA[1]            = gp_face1;     // Action key A
keyX[1]            = gp_face3;     // Action key X
keyB[1]            = gp_face2;     // Action key B
keyY[1]            = gp_face4;     // Action key Y

keyStart[1]        = gp_start;     // Action key Start
keySelect[1]       = gp_select     // Action key Select





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check the current input method

gamepadConnected = gamepad_is_connected(0);

// If any keyboard key is pressed, set input to keyboard

if keyboard_check_pressed(vk_anykey)
{
    inputMethod = INPUT_METHOD.keyboard;
}

// If any gamepad key is pressed, set input to gamepad

if gamepadConnected = true
{
    if gamepad_check_button_any(0) = 1
    inputMethod = INPUT_METHOD.gamepad;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get keyboard &amp; gamepad control

switch(inputMethod)
{

    // Check pressed keyboard buttons
    
    case INPUT_METHOD.keyboard:
 
    keyLeftPressed          = keyboard_check_pressed(keyLeft[0]);
    keyRightPressed         = keyboard_check_pressed(keyRight[0]);
    keyUpPressed            = keyboard_check_pressed(keyUp[0]);
    keyDownPressed          = keyboard_check_pressed(keyDown[0]);
    
    keyAPressed             = keyboard_check_pressed(keyA[0]);
    keyXPressed             = keyboard_check_pressed(keyX[0]);
    keyBPressed             = keyboard_check_pressed(keyB[0]);
    keyYPressed             = keyboard_check_pressed(keyY[0]);
    
    keyStartPressed         = keyboard_check_pressed(keyStart[0]);
    keySelectPressed        = keyboard_check_pressed(keySelect[0]);
    
    // Check held keyboard buttons
    
    keyLeftHeld             = keyboard_check(keyLeft[0]);
    keyRightHeld            = keyboard_check(keyRight[0]);
    keyUpHeld               = keyboard_check(keyUp[0]);
    keyDownHeld             = keyboard_check(keyDown[0]);
    
    keyAHeld                = keyboard_check(keyA[0]);
    keyXHeld                = keyboard_check(keyX[0]);
    keyBHeld                = keyboard_check(keyB[0]);
    keyYHeld                = keyboard_check(keyY[0]);
    
    keyStartHeld            = keyboard_check(keyStart[0]);
    keySelectHeld           = keyboard_check(keySelect[0]);
    
    // Check released keyboard buttons
    
    keyLeftReleased         = keyboard_check_released(keyLeft[0]);
    keyRightReleased        = keyboard_check_released(keyRight[0]);
    keyUpReleased           = keyboard_check_released(keyUp[0]);
    keyDownReleased         = keyboard_check_released(keyDown[0]);
    
    keyAReleased            = keyboard_check_released(keyA[0]);
    keyXReleased            = keyboard_check_released(keyX[0]);
    keyBReleased            = keyboard_check_released(keyB[0]);
    keyYReleased            = keyboard_check_released(keyY[0]);
    
    keyStartReleased        = keyboard_check_released(keyStart[0]);
    keySelectReleased       = keyboard_check_released(keySelect[0]);
    
    break;
    
    case INPUT_METHOD.gamepad:
    
    // Check pressed gamepad buttons
 
    keyLeftPressed          = gamepad_button_check_pressed(0, keyLeft[1]);
    keyRightPressed         = gamepad_button_check_pressed(0, keyRight[1]);
    keyUpPressed            = gamepad_button_check_pressed(0, keyUp[1]);
    keyDownPressed          = gamepad_button_check_pressed(0, keyDown[1]);
    
    keyAPressed             = gamepad_button_check_pressed(0, keyA[1]);
    keyXPressed             = gamepad_button_check_pressed(0, keyX[1]);
    keyBPressed             = gamepad_button_check_pressed(0, keyB[1]);
    keyYPressed             = gamepad_button_check_pressed(0, keyY[1]);
    
    keyStartPressed         = gamepad_button_check_pressed(0, keyStart[1]);
    keySelectPressed        = gamepad_button_check_pressed(0, keySelect[1]);
    
    // Check held gamepad buttons
    
    keyLeftHeld             = gamepad_button_check(0, keyLeft[1]);
    keyRightHeld            = gamepad_button_check(0, keyRight[1]);
    keyUpHeld               = gamepad_button_check(0, keyUp[1]);
    keyDownHeld             = gamepad_button_check(0, keyDown[1]);
    
    keyAHeld                = gamepad_button_check(0, keyA[1]);
    keyXHeld                = gamepad_button_check(0, keyX[1]);
    keyBHeld                = gamepad_button_check(0, keyB[1]);
    keyYHeld                = gamepad_button_check(0, keyY[1]);
    
    keyStartHeld            = gamepad_button_check(0, keyStart[1]);
    keySelectHeld           = gamepad_button_check(0, keySelect[1]);
    
    // Check released gamepad buttons
    
    keyLeftReleased         = gamepad_button_check_released(0, keyLeft[1]);
    keyRightReleased        = gamepad_button_check_released(0, keyRight[1]);
    keyUpReleased           = gamepad_button_check_released(0, keyUp[1]);
    keyDownReleased         = gamepad_button_check_released(0, keyDown[1]);
    
    keyAReleased            = gamepad_button_check_released(0, keyA[1]);
    keyXReleased            = gamepad_button_check_released(0, keyX[1]);
    keyBReleased            = gamepad_button_check_released(0, keyB[1]);
    keyYReleased            = gamepad_button_check_released(0, keyY[1]);
    
    keyStartReleased        = gamepad_button_check_released(0, keyStart[1]);
    keySelectReleased       = gamepad_button_check_released(0, keySelect[1]);
 
    break;
    
}
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move moving entities

with parentMoving
{

    // Check and move on x-axis
    
    move_contact_x();

    // Check and move on y-axis

    move_contact_y();

    // Apply gravity
    
    apply_gravity();

    // Apply friction
    
    apply_friction();
    
}


with parentMovingSolid
{

    // Check and move on x-axis
    
    move_contact_x();

    // Check and move on y-axis

    move_contact_y();

    // Apply gravity
    
    apply_gravity();

    // Apply friction
    
    apply_friction();
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug stuff

// Reset room on R

if keyboard_check_pressed(ord('R'))
{
    room_restart();
}

// Move character to mouse_x,y on mb_left

if mouse_check_button_pressed(mb_left)
{
    oHero.x_speed = 0;
    oHero.y_speed = 0;
    oHero.x = mouse_x;
    oHero.y = mouse_y;
}

if mouse_check_button_pressed(mb_right)
{

    //chunk_create(mouse_x, mouse_y, sprSkullChunk)
    emitter_create(mouse_x, mouse_y, sprPot, sprSkullChunk, 
    0.5, 2, 0, 180, 0, 1, 5, 0.01, 60, 300);

}

if oHero.y &gt; room_height
{
    oHero.y = 0;
}

// Toggle fullscreen on F

if keyboard_check_pressed(ord('F'))
{

    if window_get_fullscreen()
      {
        window_set_fullscreen(false);
      }
   else
      {
        window_set_fullscreen(true);
      }
      
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
