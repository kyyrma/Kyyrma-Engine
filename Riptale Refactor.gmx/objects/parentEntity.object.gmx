<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables common to all entities

hitPoints           = -1;       // -1 means the object is indestructable
attackPower         = 0;        // How much damage this entity causes

flinchTimer         = 0;        // Used to count time the character flinches
flinchMax           = 60;       // Maximum flinch time

lastHitBy           = noone;    // Who hit you last?

spawnOnDeath[9]     = noone;    // Up to 9 objects to spawn on destroy

chunk               = noone;    // What type of chunks to spawn on destroy
chunkAmount         = 0;        // How many chuncks to spawn on destroy

team                = TEAM.neutral;  // What team the entity belongs to (ally, neutral, enemy)

draw                = true;     // If the object should be drawn

facing              = 1;        // If the object is heading left (-1) or right (1)

collision           = 0;        // Will there be a collision with this object?

x_initial           = x;
y_initial           = y;

x_center            = x - sprite_xoffset + sprite_width / 2; // Center x
y_center            = y - sprite_xoffset + sprite_width / 2; // Center y

image_speed         = 0;        // Default animation speed

image_alpha         = 1;        // Image alpha

triggered           = false;    // Is the entity triggered?

triggerable         = false;    // Should the entity be triggerable?
triggerByDamage     = false;    // Should the entity trigger on damage?
triggerByTouch      = false;    // Should the entity trigger on touch?
triggerByDestroy    = false;    // Should the entity trigger on destroy?

triggerConducted    = false;    // Have I already conducted my trigger?

target[9]           = noone;    // Target(s) to trigger

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create chunks and spawn items

if chunk != noone
{
    for (i = 0; i &lt; chunkAmount; i += 1)
    {
        chunk_create(x_center - sprite_xoffset, y_center - sprite_yoffset, chunk);
    }
}

// Trigger if applicable

if triggerByDestroy = true
{

    for (i = 0; i &lt; 9; i += 1)
    {
 
        if target[i] != 0 &amp;&amp; instance_exists(target[i])
        {
            trigger(target[i]);
            show_debug_message(object_get_name(id.object_index) + " " + string(id) + " is triggering " + object_get_name(target[i].object_index) + " " +string(target[i]))
        }
        
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Toggle triggered off

if triggered = true &amp;&amp; triggerConducted = true
{
    triggered = false;
    triggerConducted = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy if hit points reach 0

if hitPoints = 0
{
    show_debug_message(object_get_name(id.object_index) + " " + string(id) + " is destroyed!");
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Conduct trigger onwards

if triggered = true
{
    for (i = 0; i &lt; 9; i += 1)
    {
 
        if target[i] != 0 &amp;&amp; instance_exists(target[i])
        {
            trigger(target[i]);
            show_debug_message(object_get_name(id.object_index) + " " + string(id) + " is triggering " + object_get_name(target[i].object_index) + " " +string(target[i]))
        }
        
    }
    
    triggerConducted = true;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update variables

x_center            = x - sprite_xoffset + sprite_width / 2; // Center x
y_center            = y - sprite_xoffset + sprite_width / 2; // Center y


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Counters

// Counter for flinching

if flinchTimer &gt; 0
{
    flinchTimer -= 1;
}

// Clear the last hit by variable once flinching is over

if flinchTimer = 0
{
    lastHitBy = noone;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Take damage from damage sources

// Only take damage if you just didn't take damage from the same source

if instance_place(x, y, parentDamage) &amp;&amp; lastHitBy != instance_place(x, y, parentDamage)
{

    lastHitBy = instance_place(x, y, parentDamage);

    // -1 would mean the entity is indestructible
    
    if hitPoints != -1
    {
    
        if hitPoints - lastHitBy.attackPower &gt; 0
        {
            
            hitPoints -= lastHitBy.attackPower;
            flinchTimer = flinchMax;
            show_debug_message(object_get_name(id.object_index) + " " + string(id) + " has " + string(hitPoints) + " hitpoints.");
            
        }
        
        else
        {
            hitPoints = 0;
        }
    
    }
            
// Trigger if applicable

if triggerByDamage = true
{
    triggered = true;
    flinchTimer = flinchMax;
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw own sprite if visible

if draw = true
{
    draw_sprite_ext(sprite_index, image_index, x, y, facing, image_yscale, image_angle, c_white, image_alpha);
}

if draw = true &amp;&amp; flinchTimer &gt; 0
{
    draw_sprite_ext(sprite_index, image_index, x, y, facing, image_yscale, image_angle + random_range(-3, 3), choose(c_white,c_red), image_alpha);
}

/// Draw target connections if debugmode is on

if debugMode = 1
{
    
    for (i = 0; i &lt; 9; i += 1)
    {
 
        if target[i] != 0 &amp;&amp; instance_exists(target[i])
        {
            
            draw_set_color(c_red)
            
            draw_line(x_center, y_center, target[i].x_center, target[i].y_center);
            
        }
        
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
